using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using System.Data;
using BizCommon;
using System.Drawing;

namespace UnitTests
{
    public class JsonTest
    {
        [Test]
        public void RunSubStringTest()
        {
            HNT h = new HNT()
            {
                ID = Guid.NewGuid(),
                BD = "标段",
                DW = "单位",
                SYS = "试验室",
                GCMC = "工程名称",
                Line = "线路",
                LQ = "龄期",
                QDDJ = "强度等级",
                QDZ = new List<float>() { 12.1f, 12.4f, 12.6f },
                SGBW = "施工部位",
                SYRQ = DateTime.Now,
                ZJRQ = DateTime.Now
            };
            JZCellStyle cs = new JZCellStyle();
            cs.BackColor = Color.White;
            cs.FamilyName = "宋体";
            cs.FontSize = 17;
            cs.FontStyle = FontStyle.Bold;
            cs.ForColor = Color.Black;
            
            GJ j = new GJ()
            {
                ID = Guid.NewGuid(),
                BD = "标段",
                DW = "单位",
                SYS = "试验室",
                GCMC = "工程名称",
                GGXH = "规格型号",
                KLQD = new List<float>() { 123.1f, 123.2f, 123.3f },
                Line = "线路",
                PH = "批号",
                QFQD = new List<float>() { 33.3f, 22.2f, 11.1f },
                SCCJ = "生产厂家",
                SGBW = "施工部位",
                SYRQ = DateTime.Now,
                SYLB = "试验类别",
                ZJ = "直径"
            };
            String json = Newtonsoft.Json.JsonConvert.SerializeObject(h);
            String jsonCS = Newtonsoft.Json.JsonConvert.SerializeObject(cs);

            //string str = "{"ForColor":"Black","BackgroundColor":"White","FamilyName":"宋体","FontStyle":1,"FontSize":17.0}";
            JZCellStyle css = Newtonsoft.Json.JsonConvert.DeserializeObject<JZCellStyle>(jsonCS);

            json = Newtonsoft.Json.JsonConvert.SerializeObject(j);
            Assert.IsNotEmpty(json);
        }

        [Test]
        public void DataSetToJsonTest()
        {
            DataSet ds = new DataSet();
            DataTable dt1 = new DataTable();
            dt1.Columns.Add("UID", typeof(System.Int32));//用户编号
            dt1.Columns.Add("UserName", typeof(System.String));//用户姓名
            for (int i = 0; i < 10; i++)
            {
                var r = dt1.NewRow();
                r["UID"] = i;
                r["UserName"] = "teddy" + i;
                dt1.Rows.Add(r);
            }
            ds.Tables.Add(dt1);

            DataTable dt2 = new DataTable();
            dt2.Columns.Add("K1", typeof(System.Int32));//用户编号
            dt2.Columns.Add("K2", typeof(System.String));//用户姓名
            for (int i = 0; i < 10; i++)
            {
                var r = dt2.NewRow();
                r["K1"] = i;
                r["K2"] = "K" + i;
                dt2.Rows.Add(r);
            }
            dt2.TableName = "[kkk]";
            ds.Tables.Add(dt2);

            Assert.AreEqual(10, dt1.Rows.Count);
            String json = Newtonsoft.Json.JsonConvert.SerializeObject(ds);
            var ds1 = Newtonsoft.Json.JsonConvert.DeserializeObject<DataSet>(json);
            Assert.AreEqual(2, ds1.Tables.Count);
        }

        [Test]
        public void 水泥高性能StadiumConfig()
        {
            StadiumConfig config = new StadiumConfig()
            {
                fZJRQ = new StadiumColumnInfo() { TableName = "[biz_norm_水泥试验委托单]", ColumnName = "col_norm_H25" },
                fBGBH = new StadiumColumnInfo() { TableName = "[biz_norm_水泥试验报告（高性能）]", ColumnName = "col_norm_L5" },
                fPH = new StadiumColumnInfo() { TableName = "[biz_norm_水泥试验委托单]", ColumnName = "col_norm_H9" },
                fWTBH = new StadiumColumnInfo() { TableName = "[biz_norm_水泥试验委托单]", ColumnName = "col_norm_H5" },
                fSJBH = null,
                fSJSize = null,
                fAdded = new StadiumColumnInfo() { TableName = "[biz_norm_水泥试验委托单]", ColumnName = "col_norm_C11" }
            };
            config.DayList.Add(new StadiumDay() { Days=3, IsParameterDays=false, PDays=null, ItemName="水泥抗压3天", ItemID="63",
            ValidInfo = new StadiumColumnInfo() { TableName = "[biz_norm_水泥试验报告（高性能）]", ColumnName = "col_norm_P30" }
            });
            config.DayList.Add(new StadiumDay() { Days = 28, IsParameterDays = false, PDays = null, ItemName = "水泥抗压28天", ItemID = "64",
            ValidInfo = new StadiumColumnInfo() { TableName = "[biz_norm_水泥试验报告（高性能）]", ColumnName = "col_norm_P31" }
            });
            String json = Newtonsoft.Json.JsonConvert.SerializeObject(config);

            Assert.AreEqual("", json);
        }

        [Test]
        public void 混凝土1天StadiumConfig()
        {
            StadiumConfig config = new StadiumConfig()
            {
                fZJRQ = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_C21" },
                fBGBH = new StadiumColumnInfo() { TableName = "[biz_norm_1d混凝土检查试件抗压强度试验报告]", ColumnName = "col_norm_R5" },
                fPH = null,
                fWTBH = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_H5" },
                fSJBH = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_C8" },
                fSJSize = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_C11" },
                fAdded = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_C9" }
            };
            config.DayList.Add(new StadiumDay()
            {
                Days = 1,
                IsParameterDays = false,
                PDays = null,
                ItemName = "混凝土抗压1天",
                ItemID = "1",
                ValidInfo = null
            });
            String json = Newtonsoft.Json.JsonConvert.SerializeObject(config);

            Assert.AreEqual("", json);
        }

        [Test]
        public void 混凝土检查试件抗压强度试验报告StadiumConfig()
        {
            StadiumConfig config = new StadiumConfig()
            {
                fZJRQ = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_C21" },
                fBGBH = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土检查试件抗压强度试验报告]", ColumnName = "col_norm_R5" },
                fPH = null,
                fWTBH = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_H5" },
                fSJBH = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_C8" },
                fSJSize = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_C11" },
                fAdded = new StadiumColumnInfo() { TableName = "[biz_norm_混凝土试验任务委托单]", ColumnName = "col_norm_C9" }
            };
            config.DayList.Add(new StadiumDay()
            {
                Days = 3,
                IsParameterDays = false,
                PDays = null,
                ItemName = "混凝土抗压3天",
                ItemID = "92",
                ValidInfo = null
            });
            config.DayList.Add(new StadiumDay()
            {
                Days = 7,
                IsParameterDays = false,
                PDays = null,
                ItemName = "混凝土抗压7天",
                ItemID = "93",
                ValidInfo = null
            });
            config.DayList.Add(new StadiumDay()
            {
                Days = 28,
                IsParameterDays = false,
                PDays = null,
                ItemName = "混凝土抗压28天",
                ItemID = "94",
                ValidInfo = null
            });
            config.DayList.Add(new StadiumDay()
            {
                Days = 56,
                IsParameterDays = false,
                PDays = null,
                ItemName = "混凝土抗压56天",
                ItemID = "95",
                ValidInfo = null
            });
            String json = Newtonsoft.Json.JsonConvert.SerializeObject(config);

            Assert.AreEqual("", json);
        }

        [Test]
        public void JosnTest2()
        {
            String str
            List<float> list = Newtonsoft.Json.JsonConvert.DeserializeObject<List<float>>(str);
            var l = (from n in list
                     where n >= 20.1
                     select n).ToList();
            int count = l.Distinct().Count();
            Assert.AreEqual(count, 2);
        }

        [Test]
        public void TestJson()
        {
            var list = Newtonsoft.Json.JsonConvert.DeserializeObject<List<JZCustomView>>("null");
            Assert.IsNotNull(list);
        }
    }

    [Serializable]
    public class ModifyItem
    {
        public String SheetName { get; set; }
        public String CellPosition { get; set; }
        public String OriginalValue { get; set; }
        public String CurrentValue { get; set; }
    }

    [Serializable]
    public class TransferBase
    {
        /// <summary>
        /// 标识
        /// </summary>
        public Guid ID { get; set; }

        /// <summary>
        /// 工程名称
        /// </summary>
        public String GCMC { get; set; }

        /// <summary>
        /// 施工部位
        /// </summary>
        public String SGBW { get; set; }

        /// <summary>
        /// 铁路线
        /// </summary>
        public String Line { get; set; }

        /// <summary>
        /// 标段
        /// </summary>
        public String BD { get; set; }

        /// <summary>
        /// 单位
        /// </summary>
        public String DW { get; set; }

        /// <summary>
        /// 试验室
        /// </summary>
        public String SYS { get; set; }

        /// <summary>
        /// 试验日期
        /// </summary>
        public DateTime SYRQ { get; set; }
    }

    [Serializable]
    public class GJ : TransferBase
    {
        /// <summary>
        /// 试验类别
        /// </summary>
        public String SYLB { get; set; }

        /// <summary>
        /// 规格型号
        /// </summary>
        public String GGXH { get; set; }

        /// <summary>
        /// 直径
        /// </summary>
        public String ZJ { get; set; }

        /// <summary>
        /// 批号
        /// </summary>
        public String PH { get; set; }

        /// <summary>
        /// 生产厂家
        /// </summary>
        public String SCCJ { get; set; }

        /// <summary>
        /// 屈服强度
        /// </summary>
        public List<float> QFQD { get; set; }

        /// <summary>
        /// 抗拉强度
        /// </summary>
        public List<float> KLQD { get; set; }
    }

    [Serializable]
    public class HNT : TransferBase
    {
        /// <summary>
        /// 强度等级
        /// </summary>
        public String QDDJ { get; set; }

        /// <summary>
        /// 制件日期
        /// </summary>
        public DateTime ZJRQ { get; set; }

        /// <summary>
        /// 龄期
        /// </summary>
        public String LQ { get; set; }

        /// <summary>
        /// 强度值
        /// </summary>
        public List<float> QDZ { get; set; }
    }
}
